"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[824],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1201:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:1},i="Basic Syntax",l={unversionedId:"balam/balam-api/mutations/basic-syntax",id:"balam/balam-api/mutations/basic-syntax",title:"Basic Syntax",description:"Mutations in balam hold a standard syntax. All mutations begin with create, update and delete prefix",source:"@site/docs/balam/balam-api/mutations/basic-syntax.md",sourceDirName:"balam/balam-api/mutations",slug:"/balam/balam-api/mutations/basic-syntax",permalink:"/biometrio-earth-docs/docs/balam/balam-api/mutations/basic-syntax",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"balamSidebar",previous:{title:"Mutations",permalink:"/biometrio-earth-docs/docs/category/mutations"},next:{title:"Special fields",permalink:"/biometrio-earth-docs/docs/balam/balam-api/mutations/special-fields"}},s={},d=[],p={toc:d},m="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basic-syntax"},"Basic Syntax"),(0,r.kt)("p",null,"Mutations in balam hold a standard syntax. All mutations begin with create, update and delete prefix\ngiven the operation that the user wants to perform. The following are examples of the three operations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"title=Create",title:"Create"},'mutation {\n    createProject(\n    title: "test project",\n    shortname: "test1"\n  ) {\n    id\n  }\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Check what fields are required for each mutation, sometimes some fields are required in the create\nmutation, but not in the update mutation. To know what fields are required you can check the docs in\nthe graphiql interface or in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/category/balam---apps-and-models"},"Balam - Apps and Models")," section.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"title=Update",title:"Update"},'mutation {\n    updateProject(\n    id: "799da30e-96eb-4367-bab1-1d0421ad360c",\n    country: "MX"\n  ) {\n    country\n  }\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Both update and delete mutations need the id field, to know which object in the model the\nmutation should be applied to.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:"title=Delete",title:"Delete"},'mutation {\n    deleteProject(\n    id:"799da30e-96eb-4367-bab1-1d0421ad360c"\n  ) {\n    message\n    errors {\n      field\n      messages\n    }\n  }\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The delete mutation doesn't returns the field of the deleted object, it only returns the message, and errors fields, which hold information about the delete operation.")),(0,r.kt)("p",null,"The errors field is shared by all CUD mutations and it gives information if there is any error in the\noperation. This field has 2 subfields which give the error information:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"errors {\n    field\n    messages\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"field")," says to which field of the input arguments the error is related to, and ",(0,r.kt)("inlineCode",{parentName:"p"},"messages")," gives a string\nwith information of the error in the given ",(0,r.kt)("inlineCode",{parentName:"p"},"field"),"."),(0,r.kt)("p",null,"To handle relations in the mutations, you must know the id of the object to relate. For example, if you\nwant to relate a ",(0,r.kt)("strong",{parentName:"p"},"Site")," object to and object of the ",(0,r.kt)("strong",{parentName:"p"},"Project")," model at creation you will do it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n    createSite(\n    identifier: "site 1",\n    project: "799da30e-96eb-4367-bab1-1d0421ad360c"\n  ) {\n    id\n  }\n}\n')),(0,r.kt)("p",null,"This will create the ",(0,r.kt)("em",{parentName:"p"},"site"),' "site 1" and it will be related to the ',(0,r.kt)("em",{parentName:"p"},"project")," with id ",(0,r.kt)("inlineCode",{parentName:"p"},"799da30e-96eb-4367-bab1-1d0421ad360c"),". But what if we have a model that has a ",(0,r.kt)("em",{parentName:"p"},"OneToMany")," relation with\nanother model? In this case we can achieve the relation several object of another model by passing a\nlist of ids:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n    createGroup(\n      name: "test group 1"\n      users: [\n        "56yda30e-96eb-4367-bab1-1d0421ad360c",\n        "56yda30e-96eb-65kl-568k-1d0421ad360c",\n        "56yda30e-96eb-549k-bab1-1d345jad360c"\n      ]\n    ) {\n        id\n    }\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The Group model is different from any other model. Here is used to show how to relate multiple objects,\nor entries in the db that hold a ",(0,r.kt)("em",{parentName:"p"},"OneToMany")," relation with another model, but this model has\na different resolver than the others, and that's why it doesn't have an errors field.")))}c.isMDXComponent=!0}}]);