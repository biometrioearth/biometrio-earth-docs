"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[105],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="Intro",s={unversionedId:"balam/intro",id:"balam/intro",title:"Intro",description:"Balam helps to manage biometrio.earth monitoring projects. It's built using Django (ver 4.1), and GraphQL with Graphene for the API.",source:"@site/docs/balam/intro.md",sourceDirName:"balam",slug:"/balam/intro",permalink:"/biometrio-earth-docs/docs/balam/intro",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"balamSidebar",next:{title:"Balam - Apps and Models",permalink:"/biometrio-earth-docs/docs/category/balam---apps-and-models"}},l={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"What you&#39;ll need",id:"what-youll-need",level:3},{value:"First steps",id:"first-steps",level:2},{value:"Useful commands",id:"useful-commands",level:2},{value:"Run the project",id:"run-the-project",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"intro"},"Intro"),(0,r.kt)("p",null,"Balam helps to manage biometrio.earth monitoring projects. It's built using Django (ver 4.1), and GraphQL with Graphene for the API."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"If you want to deploy Balam you'll need to create an ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file and meet certain requirements in your system."),(0,r.kt)("h3",{id:"what-youll-need"},"What you'll need"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.docker.com/get-started/"},"docker")," version 20.10.18 or above"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.docker.com/compose/"},"docker-compose")," version 1.29.2 or above"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://classic.yarnpkg.com/lang/en/docs/install/#windows-stable"},"yarn")," version 1.22 or above")),(0,r.kt)("h2",{id:"first-steps"},"First steps"),(0,r.kt)("p",null,"Before anything, you'll need to create an .env file. You can use .env.example to create it. This are the contents of the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".env"',title:'".env"'},'#Django\nDEBUG=1\nSECRET_KEY="mysecretkey" # define a different secret key for your project\nDJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 0.0.0.0 [::1] * # change to your desired allowed hosts\nDJANGO_CORS_ALLOWED_ORIGINS=http://localhost:3000 http://127.0.0.1:3000 # change to your desired allowed origins\nSESSION_EXPIRATION=120 # time in minutes of session expiration\nBASE_URL=\'\'\n\n# database access credentials\n# change as needed\nBALAM_DATABASE_NAME=example_balam_db\nBALAM_DATABASE_USER=postgres\nBALAM_DATABASE_PASSWORD=postgres\nBALAM_DATABASE_HOST=balam_db\nBALAM_DATABASE_PORT=5432\nDEV_EXPOSE_DB_PORT=5433 # this port is used to expose the database to the host, maybe try a different one than 5432\n\n# docker app port\n# with this one we expose the app, you can change it to any other port you want\nBALAM_APP_PORT=7070\n\n# default superuser\n# needed!\n# with this you\'ll define the default superuser in the platform\nBALAM_SUPERUSER="admin"\nBALAM_SUPERUSER_PASS="somepassword"\n')),(0,r.kt)("p",null,"once created, you can run the containers to start using this project."),(0,r.kt)("h2",{id:"useful-commands"},"Useful commands"),(0,r.kt)("p",null,"There are some useful commands to easily handle the containers in this project. We use yarn to manage this commands, that's why it's needed as a requirement. The commands are the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ yarn start <dev|aws> # starts all containers in the background, can use it also to build them for the first time.\n\n$ yarn stop <dev|aws> # stops the containers\n\n$ yarn restart <dev|aws> <service name> # restarts the service specified\n\n$ yarn logs <dev|aws> <service name> # shows logs for the desired service\n")),(0,r.kt)("p",null,"It is important to specify the environment, either dev or aws. The aws environment doesn't use a db container.\nAnd if you don't want to use yarn, that's ok! You can always use the docker-compose ",(0,r.kt)("inlineCode",{parentName:"p"},"up"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"down"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"restart")," commands."),(0,r.kt)("h2",{id:"run-the-project"},"Run the project"),(0,r.kt)("p",null,"To build and start the containers you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn start")," command. Once build and up, you can access to the default endpoints in this routes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"graphql:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# graphql endpoint\nhttp://localhost:<BALAM_APP_PORT>/graphql/\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"graphiql:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# graphiql interface for testing queries and mutations\nhttp://localhost:<BALAM_APP_PORT>\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"admin"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# default django admin site\nhttp://localhost:<BALAM_APP_PORT>/admin/\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"postgres: is exposed on the port you specified with ",(0,r.kt)("inlineCode",{parentName:"p"},"DEV_EXPOSE_DB_PORT")," in you ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file"))))}u.isMDXComponent=!0}}]);