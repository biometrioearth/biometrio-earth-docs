"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[335],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),h=r,k=c["".concat(s,".").concat(h)]||c[h]||m[h]||o;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8483:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="Authentication",l={unversionedId:"balam/balam-api/authentication",id:"balam/balam-api/authentication",title:"Authentication",description:"All requests to the API must be authenticated, to authenticate requests we use a JWT token. To obtain this token you can make a request to the graphql endpoint using the mutation:",source:"@site/docs/balam/balam-api/authentication.md",sourceDirName:"balam/balam-api",slug:"/balam/balam-api/authentication",permalink:"/biometrio-earth-docs/docs/balam/balam-api/authentication",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"balamSidebar",previous:{title:"Balam - API",permalink:"/biometrio-earth-docs/docs/category/balam---api"},next:{title:"How to query?",permalink:"/biometrio-earth-docs/docs/balam/balam-api/queries"}},s={},u=[{value:"Refresh JWT token",id:"refresh-jwt-token",level:2},{value:"Verify token",id:"verify-token",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"All requests to the API must be authenticated, to authenticate requests we use a JWT token. To obtain this token you can make a request to the graphql endpoint using the mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  tokenAuth(\n    username: "<some_user>",\n    password: "<some_password>"\n  ) {\n    token\n  }\n}\n')),(0,r.kt)("p",null,"this will return the following response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "tokenAuth": {\n      "token": "<token>"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"use that token in your requests, setting the Authentication header like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'"Authentication": "JWT <token>"\n')),(0,r.kt)("h2",{id:"refresh-jwt-token"},"Refresh JWT token"),(0,r.kt)("p",null,"By default the JWT generated is valid only for 2 hours. After that your JWT token is expired and\nwon't be able to make request until you generate a new one. But you can also refresh a token, so\nif you have a ",(0,r.kt)("em",{parentName:"p"},"remember me")," feature, you can use the refresh token mutation to get a new token\nwithout asking the user to enter its credentials again."),(0,r.kt)("p",null,"You can use this mutation like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  refreshToken(\n    token: "<old token>"\n  ) {\n    token\n    refreshExpiresIn\n  }\n}\n')),(0,r.kt)("p",null,"and you'll get something similar as the ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenAuth")," mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "refreshToken": {\n      "token": "<new token>",\n      "refreshExpiresIn": 1687217746\n    }\n  }\n}\n')),(0,r.kt)("p",null,"you can also get the expiration time in the request adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"refreshExpiresIn")," in the mutation. There's a time limit though,\nafter 7 days, you won't be able to get a new token by ",(0,r.kt)("inlineCode",{parentName:"p"},"refreshToken"),", so after this time you'll be signed out, and will need to\nget a new token by the ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenAuth")," mutation."),(0,r.kt)("h2",{id:"verify-token"},"Verify token"),(0,r.kt)("p",null,"You can also verify your token to check if is still valid. To do so, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"verifyToken")," mutation. This mutation takes the\ntoken as an input and returns information encrypted in the token. Here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  verifyToken(\n    token: "<token>"\n  ){\n    payload\n  }\n}\n')),(0,r.kt)("p",null,"and the response looks something similar to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "verifyToken": {\n      "payload": {\n        "username": "<username>",\n        "sub": "<user-uuid>",\n        "exp": 1686620159,\n        "origIat": 1686612946\n      }\n    }\n  }\n}\n')))}m.isMDXComponent=!0}}]);