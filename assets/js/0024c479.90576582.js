"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[214],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=m(n),c=r,f=d["".concat(p,".").concat(c)]||d[c]||u[c]||l;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3357:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:5},i="Filter with related models",o={unversionedId:"balam/balam-api/filter-related",id:"balam/balam-api/filter-related",title:"Filter with related models",description:"Because some models in Balam are related to other models, you may want to filter a list of objects",source:"@site/docs/balam/balam-api/filter-related.md",sourceDirName:"balam/balam-api",slug:"/balam/balam-api/filter-related",permalink:"/biometrio-earth-docs/docs/balam/balam-api/filter-related",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"balamSidebar",previous:{title:"Search and filter",permalink:"/biometrio-earth-docs/docs/balam/balam-api/search-and-filter"},next:{title:"Subqueries",permalink:"/biometrio-earth-docs/docs/balam/balam-api/subqueries"}},p={},m=[],s={toc:m},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"filter-with-related-models"},"Filter with related models"),(0,r.kt)("p",null,"Because some models in ",(0,r.kt)("em",{parentName:"p"},"Balam")," are related to other models, you may want to filter a list of objects\nby a certain value in its related model. You can do this type of filter in ",(0,r.kt)("em",{parentName:"p"},"Balam")," API with the\narguments ",(0,r.kt)("em",{parentName:"p"},"relatedField")," and ",(0,r.kt)("em",{parentName:"p"},"related"),"."),(0,r.kt)("p",null,"For example, suppose that I want a list of all the ",(0,r.kt)("em",{parentName:"p"},"Sites"),", so I write a query like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-query"},"{\n  allSites {\n    pageInfo {\n      totalCount\n    }\n    items {\n      identifier\n    }\n  }\n}\n")),(0,r.kt)("p",null,"which returns "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "allSites": {\n      "pageInfo": {\n        "totalCount": 101\n      },\n      "items": [\n        ...\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"but now, I want to retrieve all the ",(0,r.kt)("em",{parentName:"p"},"sites")," that has ",(0,r.kt)("em",{parentName:"p"},"sampling points")," which its ",(0,r.kt)("em",{parentName:"p"},"identifier"),"\nfield is not ",(0,r.kt)("em",{parentName:"p"},"null"),". So I modify the query and add the argument ",(0,r.kt)("em",{parentName:"p"},"filters")," but instead of the usual\narguments I use the ",(0,r.kt)("em",{parentName:"p"},"relatedField")," and ",(0,r.kt)("em",{parentName:"p"},"related")," arguments like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  allSites(\n    filters: {\n      related: samplingpoint\n      relatedField: "identifier"\n      value: null\n      operator: neq\n    }\n  ) {\n    pageInfo {\n      totalCount\n    }\n    items {\n      identifier\n    }\n  }\n}\n')),(0,r.kt)("p",null,"and now this returns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "allSites": {\n      "pageInfo": {\n        "totalCount": 4\n      },\n      "items": [\n        ...\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"so there are only 4 ",(0,r.kt)("em",{parentName:"p"},"sites")," in the database which has at least 1 ",(0,r.kt)("em",{parentName:"p"},"sampling point")," with a not ",(0,r.kt)("em",{parentName:"p"},"null"),"\nvalue in the ",(0,r.kt)("em",{parentName:"p"},"identifier")," field."),(0,r.kt)("p",null,"So the ",(0,r.kt)("em",{parentName:"p"},"related")," argument refers to the related model, in the example before ",(0,r.kt)("em",{parentName:"p"},"related")," points to the ",(0,r.kt)("strong",{parentName:"p"},"Sampling Point")," model, that is related to the ",(0,r.kt)("strong",{parentName:"p"},"Site")," model. And the ",(0,r.kt)("em",{parentName:"p"},"relatedField")," refers to the field in the related model in which we want to apply the search."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You cannot mix the ",(0,r.kt)("em",{parentName:"p"},"related")," and ",(0,r.kt)("em",{parentName:"p"},"relatedField")," with ",(0,r.kt)("em",{parentName:"p"},"field"),". If you want to apply a filter using a\nrelated model you should only use ",(0,r.kt)("em",{parentName:"p"},"related")," and ",(0,r.kt)("em",{parentName:"p"},"relatedField"),", and if you want to apply a simple\nfilter using a field in the model only use ",(0,r.kt)("em",{parentName:"p"},"field"),". Mixing this arguments can lead to an error.")),(0,r.kt)("p",null,"You can also filter the list of objects in the model whit this related filter and the simple filter\nusing the AND/OR operators:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  allSites(\n    filters: {\n      operator: AND\n      filters: [\n        {\n          related: samplingpoint\n          relatedField: "identifier"\n          value: null\n          operator: neq\n        },\n        {\n          field: identifier\n          value: "S",\n          operator: contains\n        }\n      ]\n    }\n  ) {\n    pageInfo {\n      totalCount\n    }\n    items {\n      identifier\n    }\n  }\n}\n')),(0,r.kt)("p",null,"now this new query returns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "allSites": {\n      "pageInfo": {\n        "totalCount": 2\n      },\n      "items": [\n        ...\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"so now we are filtering the objects check if at least one ",(0,r.kt)("em",{parentName:"p"},"sampling point")," related to the site has a\nnot ",(0,r.kt)("em",{parentName:"p"},"null")," value in its ",(0,r.kt)("em",{parentName:"p"},"identifier")," field ",(0,r.kt)("strong",{parentName:"p"},"and")," also we are filtering the list checking if the\n",(0,r.kt)("em",{parentName:"p"},"identifier")," field of the ",(0,r.kt)("em",{parentName:"p"},"site"),' contains an "S".'),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("strong",{parentName:"p"},"contains")," and ",(0,r.kt)("strong",{parentName:"p"},"notContains")," operators are case insensitive, keep in mind that when\nmaking your queries.")))}u.isMDXComponent=!0}}]);