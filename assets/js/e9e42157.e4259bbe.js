"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[717],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,h=c["".concat(s,".").concat(d)]||c[d]||u[d]||l;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2214:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:4},i="Search and filter",o={unversionedId:"balam/balam-api/search-and-filter",id:"balam/balam-api/search-and-filter",title:"Search and filter",description:"You can make a quick search in certain models in Balam, and in all models you can filter using",source:"@site/docs/balam/balam-api/search-and-filter.md",sourceDirName:"balam/balam-api",slug:"/balam/balam-api/search-and-filter",permalink:"/biometrio-earth-docs/docs/balam/balam-api/search-and-filter",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"balamSidebar",previous:{title:"Sort query results",permalink:"/biometrio-earth-docs/docs/balam/balam-api/sort-queries"},next:{title:"Filter with related models",permalink:"/biometrio-earth-docs/docs/balam/balam-api/filter-related"}},s={},p=[{value:"Search",id:"search",level:2},{value:"Filter",id:"filter",level:2}],m={toc:p},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"search-and-filter"},"Search and filter"),(0,r.kt)("p",null,"You can make a quick search in certain models in ",(0,r.kt)("em",{parentName:"p"},"Balam"),", and in all models you can filter using\nthe argument ",(0,r.kt)("em",{parentName:"p"},"filters")," in the ",(0,r.kt)("em",{parentName:"p"},"all")," queries. The ",(0,r.kt)("em",{parentName:"p"},"search")," argument is actually more specific to each\nmodel, and you cannot be used in all models. It may be available, but it won't filter the search by\nthe string you entered, so use it with caution."),(0,r.kt)("h2",{id:"search"},"Search"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"search")," argument performs a simple search in predefined fields that are normally used to identify\nan item in the list of items. For example the unique fields like username in the User model or the name\nfield in the File model. Here's an example of how to use it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  allFiles(search: "jpg") {\n    pageInfo {\n      totalCount\n    }\n    items {\n      id\n      url\n      name\n      fileMetadata\n      createdAt\n    }\n  }\n}\n')),(0,r.kt)("p",null,"and this returns the list of items that contains ",(0,r.kt)("inlineCode",{parentName:"p"},"jpg")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "allFiles": {\n      "pageInfo": {\n        "totalCount": 34\n      },\n      "items": [\n        {\n          "name": "image-1.jpg"\n        },\n        {\n          "name": "image-2.jpg"\n        },\n        ...\n      ]\n    }\n  }\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The search is done in specific fields for each model, so to know in which field the search is\nperformed, you can check the documentation for each model in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/category/balam---apps-and-models"},"Balam - Apps and Models")," section.")),(0,r.kt)("h2",{id:"filter"},"Filter"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"filters")," argument is a more special one and helps to make a more complex search. The ",(0,r.kt)("em",{parentName:"p"},"filters"),"\nargument can take 4 arguments itself to apply a filter, which are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"field"),":  is the field in the model where to apply the filter."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"operator"),": specifies the filter operator, and can be any of eq, neq, gt, gte, lt, lte, contains, notContains, OR, AND."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"valueType"),"(optional): sets the conversion of the value to the specified type. If not set, takes the value as is was written."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value"),": the value to filter with.")),(0,r.kt)("p",null,"An example of how to use it is the next one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  allGroups(filters: {\n    field: name,\n    value: "annotators",\n    operator: eq\n  }) {\n    items {\n      id\n      name\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Here we are filtering the results that are an exact match with the value ",(0,r.kt)("em",{parentName:"p"},"annotators")," in the field name of the model ",(0,r.kt)("strong",{parentName:"p"},"Group"),". The ",(0,r.kt)("em",{parentName:"p"},"valueType")," argument can be omitted if the value is a string."),(0,r.kt)("p",null,"We can also make a more complex filter using ",(0,r.kt)("inlineCode",{parentName:"p"},"AND"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"OR")," operators like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  allUsers(filters: {\n    operator: AND,\n      filters: [\n        {\n          field: can_login,\n          valueType: Boolean,\n          value: "true",\n          operator: eq\n        },\n        {\n          field: email,\n          value: "biometrio.earth",\n          operator: contains\n        }\n     ]\n  }) {\n    items {\n      username\n      firstName\n      email\n    }\n  }\n}\n')),(0,r.kt)("p",null,'Here we filter all users which the can_login field are setted to True and its email contains "biometrio.earth".'),(0,r.kt)("p",null,"If we want to filter for items that its value is set to null in a field, we must omit the ",(0,r.kt)("em",{parentName:"p"},"valueType")," argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allFiles(filters: {\n    field: file_metadata,\n    operator: eq,\n    value: null\n  }) {\n    items {\n      id\n      fileMetadata\n    }\n  }\n}\n")),(0,r.kt)("p",null,"this query only retrieves the files that doesn't have metadata."),(0,r.kt)("p",null,"Because some ",(0,r.kt)("em",{parentName:"p"},"Balam")," models have a JSON field, you can also make a search inside these fields, though the value of the filter needs to have a certain syntax in order to work properly. The next example shows how to do it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  allFiles(filters: {\n    field: file_metadata,\n    operator: gt,\n    value: "Duration:60"\n  }) {\n    items {\n      id\n      name\n      fileMetadata\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Here the field ",(0,r.kt)("em",{parentName:"p"},"file_metadata")," is of type JSONField, and in its properties it has a key called\n",(0,r.kt)("em",{parentName:"p"},"Duration"),", so we are filtering all the files that have the key ",(0,r.kt)("em",{parentName:"p"},"Duration")," in their JSON field\nand that have a value in that property grater than 60."))}u.isMDXComponent=!0}}]);