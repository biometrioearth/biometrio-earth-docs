"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[536],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6551:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>P,contentTitle:()=>T,default:()=>D,frontMatter:()=>O,metadata:()=>x,toc:()=>q});var a=n(7462),r=n(7294),o=n(3905),i=n(6010),l=n(2466),s=n(6550),u=n(1980),p=n(7392),c=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function y(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=m(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[s,u]=f({queryString:n,groupId:a}),[p,d]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),y=(()=>{const e=s??p;return h({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{y&&l(y)}),[y]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),d(e)}),[u,d,o]),tabValues:o}}var g=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),a=u[n].value;a!==o&&(c(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},l,{className:(0,i.Z)("tabs__item",b.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=y(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",b.tabList)},r.createElement(k,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}const S={tabItem:"tabItem_Ymn6"};function j(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(S.tabItem,a),hidden:n},t)}const O={sidebar_position:2},T="Special fields",x={unversionedId:"balam/balam-api/mutations/special-fields",id:"balam/balam-api/mutations/special-fields",title:"Special fields",description:"When updating or creating you may encounter some errors in specific fields in certain models. That's",source:"@site/docs/balam/balam-api/mutations/special-fields.mdx",sourceDirName:"balam/balam-api/mutations",slug:"/balam/balam-api/mutations/special-fields",permalink:"/biometrio-earth-docs/docs/balam/balam-api/mutations/special-fields",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"balamSidebar",previous:{title:"Basic Syntax",permalink:"/biometrio-earth-docs/docs/balam/balam-api/mutations/basic-syntax"},next:{title:"Special queries",permalink:"/biometrio-earth-docs/docs/balam/balam-api/special-queries"}},P={},q=[{value:"JSON scalar",id:"json-scalar",level:2},{value:"Date scalars",id:"date-scalars",level:2},{value:"GIS scalars",id:"gis-scalars",level:2},{value:"Point",id:"point",level:3},{value:"Polygon",id:"polygon",level:3},{value:"Mutation Examples",id:"mutation-examples",level:2},{value:"JSON",id:"json",level:3},{value:"GIS",id:"gis",level:3}],I={toc:q},E="wrapper";function D(e){let{components:t,...n}=e;return(0,o.kt)(E,(0,a.Z)({},I,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"special-fields"},"Special fields"),(0,o.kt)("p",null,"When updating or creating you may encounter some errors in specific fields in certain models. That's\nbecause some fields have custom scalars due to not being defined by default in the graphql schema or\nbecause it was easier to defined a custom scalar for the to have a better syntax when writing the query."),(0,o.kt)("h2",{id:"json-scalar"},"JSON scalar"),(0,o.kt)("p",null,"We created a custom JSON Scalar because Graphene doesn't provide a definition for this type of field.\nFor this custom scalar we let the syntax be just the same as posible as a JSON object, the only difference is that the keys the JSON object doesn't go double quoted."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createSite(\n    identifier: "site 1",\n    project: "56yda30e-96eb-65kl-568k-1d0421ad360c",\n    metadata: {\n      vegetation: "sparse",\n      treesCount: 10\n    }\n  ) {\n    id\n  }\n}\n')),(0,o.kt)("p",null,"you can also add dates but values must respect timestamp syntax: ",(0,o.kt)("inlineCode",{parentName:"p"},"yyyy-MM-ddTHH:mm:ss")," so filters can work."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"When working with this type of scalar you may encounter some errors due to JSON parsing, but this\ndepends on the programming language that you are using to make the requests. Check the bottom section\nto see some examples on how you can make requests with this type of scalar.")),(0,o.kt)("h2",{id:"date-scalars"},"Date scalars"),(0,o.kt)("p",null,"The DateTime scalar type represents a DateTime value as specified by ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"iso8601"),", which sets the format as\n",(0,o.kt)("inlineCode",{parentName:"p"},"yyyy\u2010MM\u2010ddTHH:mm:ssZ"),", same with the Date scalar, the format would be ",(0,o.kt)("inlineCode",{parentName:"p"},"yyyy\u2010MM\u2010dd"),". For now, balam only\nuses the DateTime scalar, an example of a mutation with this scalar is the following"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createSamplingPoint(\n    identifier: "sampling point 1",\n    project: "56yda30e-96eb-65kl-568k-1d0421ad360c",\n    dateDeployment: "2023-06-19T14:05:34Z"\n  ) {\n    id\n  }\n}\n')),(0,o.kt)("h2",{id:"gis-scalars"},"GIS scalars"),(0,o.kt)("p",null,"At the moment we only use ",(0,o.kt)("strong",{parentName:"p"},"two")," GIS scalars in the Balam models, and those are ",(0,o.kt)("strong",{parentName:"p"},"Polygon")," and ",(0,o.kt)("strong",{parentName:"p"},"Point"),". Both share almost the same syntax, but differ in the coordinates property of the ",(0,o.kt)("em",{parentName:"p"},"geojson"),".\nThe generic syntax of the ",(0,o.kt)("em",{parentName:"p"},"geojson")," for the GIS scalars is the next one:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "Point", // or Polygon\n    "coordinates": [\n        ...\n    ]\n}\n')),(0,o.kt)("p",null,"to use it in a query you can write:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n    createSite(\n    identifier: "site 1"\n    geometry: {\n      type: "Polygon",\n      coordinates: [\n        ...\n      ]\n    }\n  ) {\n    id\n  }\n}\n')),(0,o.kt)("p",null,"the coordinates in the ",(0,o.kt)("em",{parentName:"p"},"Point")," and ",(0,o.kt)("em",{parentName:"p"},"Polygon")," change because for points we only need the ",(0,o.kt)("em",{parentName:"p"},"latitude")," and\n",(0,o.kt)("em",{parentName:"p"},"longitude"),", and for polygons we need more information."),(0,o.kt)("h3",{id:"point"},"Point"),(0,o.kt)("p",null,"This GIS scalar is the most simple one, because we only require the ",(0,o.kt)("em",{parentName:"p"},"latitude")," and ",(0,o.kt)("em",{parentName:"p"},"longitude"),". Ypu can\nsee an example of the syntax for this scalar in the next mutation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n    createSamplingPoint(\n    identifier: "point 1"\n    location: {\n      type: "Point",\n      coordinates: [\n        100.799722222222,\n        1.03805555555555\n      ]\n    }\n  ) {\n    id\n  }\n}\n')),(0,o.kt)("p",null,"keep in mind that the first element of the ",(0,o.kt)("em",{parentName:"p"},"coordinates")," array is the ",(0,o.kt)("strong",{parentName:"p"},"longitude")," and the second one\nis the ",(0,o.kt)("strong",{parentName:"p"},"latitude"),".  "),(0,o.kt)("h3",{id:"polygon"},"Polygon"),(0,o.kt)("p",null,"A Polygon is a GIS object that stores a series of x and y coordinate pairs that enclose an area. So using\nthis knowledge and the examples before a Polygon scalar is written like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n    createSite(\n    identifier: "site 1"\n    location: {\n      type: "Polygon",\n      coordinates: [\n        [\n            [\n              -102.43244757476604,\n              26.19399923194422\n            ],\n            [\n              -102.43244757476604,\n              24.29590720167262\n            ],\n            [\n              -100.09089358417015,\n              24.29590720167262\n            ],\n            [\n              -100.09089358417015,\n              26.19399923194422\n            ],\n            [\n              -102.43244757476604,\n              26.19399923194422\n            ]\n          ]\n      ]\n    }\n  ) {\n    id\n  }\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Do not forget that the coordinates of the Polygon are inside of a nested array and the first and last\ncoordinate is the same, this to close the polygon. So the array should look like:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-text"},"coordinates: [\n    [\n        [coordinates array point 1],\n        ...\n        [coordinates array point 1]\n    ]\n]\n"))),(0,o.kt)("p",null,"and as with the Point scalar, the first element of each coordinate pair represents the longitude and the\nsecond one the latitude."),(0,o.kt)("h2",{id:"mutation-examples"},"Mutation Examples"),(0,o.kt)("p",null,"For the GIS and JSON scalars sometimes the parsing can be a little annoying, so here we present some examples to know how to work with this type of scalars."),(0,o.kt)("h3",{id:"json"},"JSON"),(0,o.kt)("p",null,"When we work with JSON scalar in the graphiql interface we can write the JSON just as similar as working\nin javascript:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'{\n  propertyOne: "somevalue",\n  propertyTwo: 123,\n  propertyThree: "2023-07-19T14:34:23Z",\n  propertyFour: false\n  ...\n}\n')),(0,o.kt)("p",null,"just remember to not quote the properties."),(0,o.kt)("p",null,"This rule of not quoting the properties must be followed when making the mutation request with js or\npython. But sometimes when parsing the request, the language and method that we use to make the parse\nadds the quotation to the property automatically, so to avoid that, you can add the JSON scalar like this:"),(0,o.kt)(N,{mdxType:"Tabs"},(0,o.kt)(j,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let data = JSON.stringify({\n  "query": `\n    mutation {\n      createSamplingPoint(\n        identifier: "sp 1",\n        project: "56yda30e-96eb-65kl-568k-1d0421ad360c",\n        // highlight-start\n        metadata: {\n          exampleOne: "somevalue",\n          exampleTwo: 123\n        }\n        // highlight-end\n      ) {\n        id\n      }\n    }\n  `\n})\n\nfetch("<BALAM API ENDPOINT>", {\n  headers: {\n    "Content-Type": "application/json",\n    "Authorization": "JWT <token>"\n  },\n  data: data\n}).then(response => { return response.json() })\n  .then(data => { console.log(data) })\n'))),(0,o.kt)(j,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'data = """\n  mutation {\n    createSamplingPoint(\n      identifier: "sp 1",\n      project: "56yda30e-96eb-65kl-568k-1d0421ad360c",\n      # highlight-start\n      metadata: {\n        exampleOne: "somevalue",\n        exampleTwo: 123\n      }\n      # highlight-end\n    ) {\n      id\n    }\n  }\n"""\nresponse = requests.post("<BALAM API ENDPOINT>",\n    headers: {\n      "Authorization": "JWT <token>"\n    },\n    json={\n        "query": data\n    })\n\nprint(response.json())\n')))),(0,o.kt)("p",null,"But what if you want to write the mutation using a proper syntax for graphql mutations?, then you'll need\nto create a dictionary or an object depending on your programming language:"),(0,o.kt)(N,{mdxType:"Tabs"},(0,o.kt)(j,{value:"js",label:"JavaScript",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// Define the GraphQL mutation\nconst mutation = `\n  mutation CreateSamplingPoint(\n    $identifier: String,\n    $project: ID!,\n    $metadata: JSONObject\n  ) {\n    createSamplingPoint(\n      identifier: $identifier,\n      project: $project,\n      metadata: $metadata\n    ) {\n      id\n    }\n  }\n`\n\n// Define the variables for the mutation\nconst variables = {\n  identifier: "sp 1",\n  project: "56yda30e-96eb-65kl-568k-1d0421ad360c",\n  metadata: {\n    exampleOne: "somevalue",\n    exampleTwo: 123\n  }\n};\n\n// Create the request body\nlet data = JSON.stringify({\n  "query": mutation,\n  "variables": variables\n})\n'))),(0,o.kt)(j,{value:"python",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Define the GraphQL mutation\nmutation = '''\n  mutation CreateSamplingPoint(\n    $identifier: String,\n    $project: ID!,\n    $metadata: JSONObject\n  ) {\n    createSamplingPoint(\n      identifier: $identifier,\n      project: $project,\n      metadata: $metadata\n    ) {\n      id\n    }\n  }\n'''\n\n# Define the variables for the mutation\nvariables = {\n  'identifier': 'sp 1',\n  'project': '56yda30e-96eb-65kl-568k-1d0421ad360c',\n  'metadata': {\n    'exampleOne': 'somevalue',\n    'exampleTwo': 123\n  }\n}\n\n# Create the request payload\npayload = {\n    'query': mutation,\n    'variables': variables\n}\n\n")))),(0,o.kt)("p",null,"The problem here is that for ",(0,o.kt)("strong",{parentName:"p"},"JavaScript")," when we use the method ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON.stringify()"),", the output of that\nwould be"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=JSON.stringify() output",title:"JSON.stringify()",output:!0},'\'{"query":"\\\\n  mutation CreateSamplingPoint(\\\\n    $identifier: String,\\\\n    $project: ID!,\\\\n    $metadata: JSONObject\\\\n  ) {\\\\n    createSamplingPoint(\\\\n      identifier: $identifier,\\\\n      project: $project,\\\\n      metadata: $metadata\\\\n    ) {\\\\n      id\\\\n    }\\\\n  }\\\\n","variables":{"identifier":"sp 1","project":"56yda30e-96eb-65kl-568k-1d0421ad360c","metadata":{"exampleOne":"somevalue","exampleTwo":123}}}\'\n')),(0,o.kt)("p",null,"and taking a closer look: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"metadata":{"exampleOne":"somevalue","exampleTwo":123}\n')),(0,o.kt)("p",null,"which has the keys quoted, and would return an error. To avoid that you can create a function that\nstringifies the object without adding the quotes in the keys and use that function when defining the\nvariables for the mutation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=JavaScript",title:"JavaScript"},'function stringifyWithoutQuotes(obj) {\n  const keyValuePairs = [];\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const value = obj[key];\n      const serializedValue = JSON.stringify(value);\n      keyValuePairs.push(`${key}:${serializedValue}`);\n    }\n  }\n\n  return `{${keyValuePairs.join(",")}}`;\n}\n\n// Define the variables for the mutation\nconst variables = {\n  identifier: "sp 1",\n  project: "56yda30e-96eb-65kl-568k-1d0421ad360c",\n  metadata: stringifyWithoutQuotes({\n    exampleOne: "somevalue",\n    exampleTwo: 123\n  })\n};\n\n...\n\n')),(0,o.kt)("p",null,"whith this you will avoid the quoted keys and your mutation will be succesful."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you use ",(0,o.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/"},"Apollo client")," of some other GraphQL client,\nyou probably don't need any of this, because with this clients you can write your mutations just the\nsame as you would in the GraphiQL.")),(0,o.kt)("h3",{id:"gis"},"GIS"),(0,o.kt)("p",null,"For GIS scalars the sytnax is the same as with the JSON ones, so you'll need to write your ",(0,o.kt)("strong",{parentName:"p"},"Polygons")," or\n",(0,o.kt)("strong",{parentName:"p"},"Points")," like a ",(0,o.kt)("em",{parentName:"p"},"geojson")," with unquoted keys."),(0,o.kt)("p",null,"You can also write your GIS scalars with ",(0,o.kt)("em",{parentName:"p"},"WKT")," syntax, if you do that, you just need to write your value\nlike a string:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n    createSamplingPoint(\n    identifier: "point 1"\n    location: "POINT (100.799722222222 1.03805555555555)"\n  ) {\n    id\n  }\n}\n')))}D.isMDXComponent=!0}}]);