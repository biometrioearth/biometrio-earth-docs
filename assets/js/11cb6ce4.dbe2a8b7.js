"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[425],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=a,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:8},i="Special queries",l={unversionedId:"balam/balam-api/special-queries",id:"balam/balam-api/special-queries",title:"Special queries",description:"Apart from the Single item queries and the List queries in Balam we also have some special queries that help to retrieve information from the Balam DB more easily without having to subquery other models or having to make multiple requests. The list of this special queries is continously growing depending on the needs of the team and the people consulting the Balam API.",source:"@site/docs/balam/balam-api/special-queries.md",sourceDirName:"balam/balam-api",slug:"/balam/balam-api/special-queries",permalink:"/biometrio-earth-docs/docs/balam/balam-api/special-queries",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"balamSidebar",previous:{title:"Special fields",permalink:"/biometrio-earth-docs/docs/balam/balam-api/mutations/special-fields"}},p={},s=[{value:"Find nearest Sampling Point",id:"find-nearest-sampling-point",level:2},{value:"Get project devices",id:"get-project-devices",level:2}],c={toc:s},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"special-queries"},"Special queries"),(0,a.kt)("p",null,"Apart from the ",(0,a.kt)("strong",{parentName:"p"},"Single item queries")," and the ",(0,a.kt)("strong",{parentName:"p"},"List queries")," in Balam we also have some special queries that help to retrieve information from the Balam DB more easily without having to subquery other models or having to make multiple requests. The list of this special queries is continously growing depending on the needs of the team and the people consulting the Balam API."),(0,a.kt)("h2",{id:"find-nearest-sampling-point"},"Find nearest Sampling Point"),(0,a.kt)("p",null,"This query finds the nearest ",(0,a.kt)("em",{parentName:"p"},"sampling point"),"  to a coordinate pair, it takes two required arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"latitude: Float"),(0,a.kt)("li",{parentName:"ul"},"longitude: Float")),(0,a.kt)("p",null,"and 5 optional:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"projectId: ID"),(0,a.kt)("li",{parentName:"ul"},"projectHash: String"),(0,a.kt)("li",{parentName:"ul"},"projectShortname: String"),(0,a.kt)("li",{parentName:"ul"},"deviceId: ID"),(0,a.kt)("li",{parentName:"ul"},"deviceSerial: String")),(0,a.kt)("p",null,"from these optional arguments you need to input at least one of them for the query to work. If you already entered the ",(0,a.kt)("em",{parentName:"p"},"projectId")," you don't need to provide the ",(0,a.kt)("em",{parentName:"p"},"projectHash")," neither the ",(0,a.kt)("em",{parentName:"p"},"projectShortname"),", you only need one of those three to narrow the search by the related project. The same goes for the ",(0,a.kt)("strong",{parentName:"p"},"device"),", if you entered the ",(0,a.kt)("em",{parentName:"p"},"deviceId"),", then you won't need to also enter the ",(0,a.kt)("em",{parentName:"p"},"deviceSerial"),"."),(0,a.kt)("p",null,"If you only entered the project (id, shortname or hash) the the search for the nearest sampling point would be shortened to the list of all the sampling points related to that project. If you also enter the device info the search would again be shortened, and that would make the search even quicker."),(0,a.kt)("p",null,"An example of use for this query is the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  findNearestSamplingPoint(\n    latitude: 19.456760107980628,\n    longitude: -104.27485923132272,\n    projectShortname: "projectexample",\n    deviceSerial: "10305868"\n  ) {\n    id\n    location\n  }\n}\n')),(0,a.kt)("p",null,"and that returns"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "findNearestSamplingPoint": {\n      "id": "2c6f6556-22a1-4eb8-b627-6a093ad4d9d9",\n      "location": {\n        "type": "Point",\n        "coordinates": [\n          -104.2649853,\n          19.4476061\n        ]\n      }\n    }\n  }\n}\n')),(0,a.kt)("h2",{id:"get-project-devices"},"Get project devices"),(0,a.kt)("p",null,"This one is a pretty simple and straightforwad query, it returns a list of all the different types of devices registered to a project. It takes only one of this three arguments:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"id: ID # the project id\nshortname: String # the project shortname\nprojectHash: String # the project hash\n")),(0,a.kt)("p",null,"you can use it like this"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  getProjectDevices(\n    shortname: "projectexample"\n  ) {\n    brand\n    deviceType\n  }\n}\n')),(0,a.kt)("p",null,"and this query only returns a list with two fields: ",(0,a.kt)("em",{parentName:"p"},"brand")," and ",(0,a.kt)("em",{parentName:"p"},"deviceType")," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "getProjectDevices": [\n      {\n        "brand": "Camera brand",\n        "deviceType": "camera"\n      },\n      {\n        "brand": "Recorder brand",\n        "deviceType": "recorder"\n      }\n    ]\n  }\n}\n')))}m.isMDXComponent=!0}}]);