"use strict";(self.webpackChunkbiometrio_earth_docs=self.webpackChunkbiometrio_earth_docs||[]).push([[530],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,d=u["".concat(l,".").concat(c)]||u[c]||h[c]||i;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3187:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2},o="How to query?",s={unversionedId:"balam/balam-api/queries",id:"balam/balam-api/queries",title:"How to query?",description:"You can query the models in balam using search by id or unique fields to filter the data for a single",source:"@site/docs/balam/balam-api/queries.md",sourceDirName:"balam/balam-api",slug:"/balam/balam-api/queries",permalink:"/biometrio-earth-docs/docs/balam/balam-api/queries",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"balamSidebar",previous:{title:"Authentication",permalink:"/biometrio-earth-docs/docs/balam/balam-api/authentication"},next:{title:"Sort query results",permalink:"/biometrio-earth-docs/docs/balam/balam-api/sort-queries"}},l={},p=[{value:"Single item queries",id:"single-item-queries",level:2},{value:"List queries",id:"list-queries",level:2},{value:"Pagination",id:"pagination",level:3}],m={toc:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-query"},"How to query?"),(0,r.kt)("p",null,"You can query the models in balam using search by id or unique fields to filter the data for a single\nentry or you can widen the search to retrieve a list of items in a model using the ",(0,r.kt)("em",{parentName:"p"},"all")," queries. "),(0,r.kt)("h2",{id:"single-item-queries"},"Single item queries"),(0,r.kt)("p",null,'You can make single item queries if you know the id of the object to retrieve. But also some models\nhave a unique field that you can use to search for them. In the next example I use the Project model\nto retrieve the "xprize" project by its id:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  project(\n    id: "799da30e-96eb-4367-bab1-1d0421ad360c"\n  ) {\n    shortname\n  }\n}\n')),(0,r.kt)("p",null,"which returns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "project": {\n      "shortname": "xprize"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"but this query can also be made with the shortname, if you don't know the id of the object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  project(\n    shortname: "xprize"\n  ) {\n    id\n  }\n}\n')),(0,r.kt)("p",null,"this returns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "project": {\n      "id": "799da30e-96eb-4367-bab1-1d0421ad360c"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"not all models have a unique field, so this kind of search cannot be made with all models, but you can\nmake single item queries by id with all models."),(0,r.kt)("h2",{id:"list-queries"},"List queries"),(0,r.kt)("p",null,"In Balam, the list queries are identified by the ",(0,r.kt)("em",{parentName:"p"},"all")," prefix. To use this type of queries is actually\npretty simple:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allProjects {\n    items {\n      id\n      shortname\n    }\n  }\n}\n")),(0,r.kt)("p",null,"in the query above we are retrieving all the projects. The common fields in the ",(0,r.kt)("em",{parentName:"p"},"all")," queries are ",(0,r.kt)("strong",{parentName:"p"},"items")," and ",(0,r.kt)("strong",{parentName:"p"},"pageInfo"),". The ",(0,r.kt)("strong",{parentName:"p"},"items")," field holds the list of all objects in the model, and its fields are the fields of the model. The ",(0,r.kt)("strong",{parentName:"p"},"pageInfo")," field, is a special field to give info about the pagination. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"All list queries are paginated and by default the max number of items in the response is ",(0,r.kt)("strong",{parentName:"p"},"10"),".")),(0,r.kt)("p",null,"You can have more info about the pagination with the ",(0,r.kt)("strong",{parentName:"p"},"pageInfo")," field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allProjects {\n    pageInfo {\n      totalCount\n      totalPages\n      hasNextPage\n      hasPrevPage\n      pageSize\n      currentPage\n    }\n    items {\n      id\n      shortname\n    }\n  }\n}\n")),(0,r.kt)("p",null,"this query returns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "allProjects": {\n      "pageInfo": {\n        "totalCount": 5,\n        "totalPages": 1,\n        "hasNextPage": false,\n        "hasPrevPage": false,\n        "pageSize": 10,\n        "currentPage": 1\n      },\n      "items": [\n        {\n          "id": "977b524a-279e-44f5-96b3-7aa26ga6udc8",\n          "shortname": "test 1"\n        },\n        {\n          "id": "9292eed8-5535-4242-91a5-1b72e546ycb7",\n          "shortname": "test 2"\n        },\n        {\n          "id": "1a58618f-2a8d-484b-a7d3-57b71c5f56a5",\n          "shortname": "test 3"\n        },\n        {\n          "id": "a500a996-35dd-4fce-a43f-424c41e334a9",\n          "shortname": "test 4"\n        },\n        {\n          "id": "799da30e-96eb-4367-bab1-1d0421ad360c",\n          "shortname": "xprize"\n        }\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"you can see in the response that the total items in the model are 5 in the ",(0,r.kt)("em",{parentName:"p"},"totalCount")," field,\nwhich that makes only 1 page, that's why the ",(0,r.kt)("em",{parentName:"p"},"totalPages")," fields returns only 1 (remember that\ndefault max items per page are 10). Because is the first page and we don't have any more pages\nthe ",(0,r.kt)("em",{parentName:"p"},"hasNextPage")," and ",(0,r.kt)("em",{parentName:"p"},"hasPrevPage")," returns ",(0,r.kt)("strong",{parentName:"p"},"false"),". The ",(0,r.kt)("em",{parentName:"p"},"pageSize")," is set to ",(0,r.kt)("strong",{parentName:"p"},"10"),", which is\nthe default, and the ",(0,r.kt)("em",{parentName:"p"},"currentPage")," is 1."),(0,r.kt)("h3",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"There are two special arguments for handling the pagination. One is ",(0,r.kt)("em",{parentName:"p"},"pageSize")," and the other is\n",(0,r.kt)("em",{parentName:"p"},"page"),". As the names suggest, ",(0,r.kt)("em",{parentName:"p"},"pageSize")," changes the number of items retreived in each page, and\nas we said before, the default is set to 10, but you can increment or decrease that number to fit\nyour needs. On the other hand, ",(0,r.kt)("em",{parentName:"p"},"page")," sets the number of the page we want to retrieve, the default\nvalue is 1. So, if this arguments are not in the query, the default is to return the first 10 items\nin the first page."),(0,r.kt)("p",null,"An example of use for these arguments is when one wants to query all sampling points but wants to\nlist 15 items per page. You can achieve thie by setting the ",(0,r.kt)("em",{parentName:"p"},"pageSize")," in the query like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allSamplingPoints(\n    pageSize: 15\n  ) {\n    pageInfo {\n      totalCount\n      totalPages\n      hasNextPage\n      hasPrevPage\n      pageSize\n      currentPage\n    }\n    items {\n      dateDeployment\n    }\n  }\n}\n")),(0,r.kt)("p",null,"and this returns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n  "data": {\n    "allSamplingPoints": {\n      "pageInfo": {\n        "totalCount": 2135,\n        "totalPages": 143,\n        "hasNextPage": true,\n        "hasPrevPage": false,\n        "pageSize": 15,\n        "currentPage": 1\n      },\n      "items": [\n        {\n          "dateDeployment": "2023-03-12T00:00:00+00:00"\n        },\n        {\n          "dateDeployment": "2023-03-12T00:00:00+00:00"\n        },\n        ...\n      ]\n    }\n  }\n}\n')),(0,r.kt)("p",null,"you can see now the ",(0,r.kt)("em",{parentName:"p"},"pageSize")," is set to 15, and that's what the reponse says too. Also, the\n",(0,r.kt)("em",{parentName:"p"},"hasNextPage")," field now returns ",(0,r.kt)("strong",{parentName:"p"},"true"),", because the ",(0,r.kt)("em",{parentName:"p"},"totalCount")," is bigger (we have more items\nin this model). We can change the ",(0,r.kt)("em",{parentName:"p"},"currentPage")," by setting the ",(0,r.kt)("em",{parentName:"p"},"page")," argument in the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  allSamplingPoints(\n    pageSize: 15\n    page: 3\n  ) {\n    pageInfo {\n      totalCount\n      totalPages\n      hasNextPage\n      hasPrevPage\n      pageSize\n      currentPage\n    }\n    items {\n      dateDeployment\n    }\n  }\n}\n")))}h.isMDXComponent=!0}}]);